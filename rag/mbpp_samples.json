[
  {
    "task_id": 1,
    "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].",
    "code": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]",
    "test_list": [
      { "input": "[[1, 2, 3], [4, 8, 2], [1, 5, 3], 2, 2]", "output": "8" },
      { "input": "[[2, 3, 4], [5, 9, 3], [2, 6, 4], 2, 2]", "output": "12" },
      { "input": "[[3, 4, 5], [6, 10, 4], [3, 7, 5], 2, 2]", "output": "16" }
    ]
  },
  {
    "task_id": 2,
    "prompt": "Write a function to find the similar elements from the given two tuple lists.",
    "code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res)",
    "test_list": [
      { "input": "(3, 4, 5, 6), (5, 7, 4, 10)", "output": "(4, 5)" },
      { "input": "(1, 2, 3, 4), (5, 4, 3, 7)", "output": "(3, 4)" },
      { "input": "(11, 12, 14, 13), (17, 15, 14, 13)", "output": "(13, 14)" }
    ]
  },
  {
    "task_id": 3,
    "prompt": "Write a python function to identify non-prime numbers.",
    "code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
    "test_list": [
      { "input": "2", "output": "False" },
      { "input": "10", "output": "True" },
      { "input": "35", "output": "True" }
    ]
  },
  {
    "task_id": 4,
    "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
    "code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
    "test_list": [
      { "input": "[25, 35, 22, 85, 14, 65, 75, 22, 58], 3", "output": "[85, 75, 65]" },
      { "input": "[25, 35, 22, 85, 14, 65, 75, 22, 58], 2", "output": "[85, 75]" },
      { "input": "[25, 35, 22, 85, 14, 65, 75, 22, 58], 5", "output": "[85, 75, 65, 58, 35]" }
    ]
  },
  {
    "task_id": 5,
    "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.",
    "code": "def count_ways(n): \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n]",
    "test_list": [
      { "input": "2", "output": "3" },
      { "input": "8", "output": "153" },
      { "input": "12", "output": "2131" }
    ]
  },
  {
    "task_id": 6,
    "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
    "test_list": [
      { "input": "13, 9", "output": "True" },
      { "input": "15, 8", "output": "False" },
      { "input": "2, 4", "output": "False" }
    ]
  },
  {
    "task_id": 7,
    "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.",
    "code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
    "test_list": [
      { "input": "'Please move back to stream'", "output": "['Please', 'move', 'back', 'stream']" },
      { "input": "'Jing Eco and Tech'", "output": "['Jing', 'Tech']" },
      { "input": "'Jhingai wulu road Zone 3'", "output": "['Jhingai', 'wulu', 'road', 'Zone']" }
    ]
  },
  {
    "task_id": 8,
    "prompt": "Write a function to find squares of individual elements in a list using lambda function.",
    "code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums",
    "test_list": [
      { "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]" },
      { "input": "[10, 20, 30]", "output": "[100, 400, 900]" },
      { "input": "[12, 15]", "output": "[144, 225]" }
    ]
  },
  {
    "task_id": 9,
    "prompt": "Write a python function to find the minimum number of rotations required to get the same string.",
    "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n",
    "test_list": [
      { "input": "\"aaaa\"", "output": "1" },
      { "input": "\"ab\"", "output": "2" },
      { "input": "\"abc\"", "output": "3" }
    ]
  },
  {
    "task_id": 10,
    "prompt": "Write a function to get the n smallest items from a dataset.",
    "code": "import heapq\ndef small_nnum(list1,n):\n  smallest=heapq.nsmallest(n,list1)\n  return smallest",
    "test_list": [
      { "input": "[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2", "output": "[10, 20]" },
      { "input": "[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5", "output": "[10, 20, 20, 40, 50]" },
      { "input": "[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3", "output": "[10, 20, 20]" }
    ]
  }
]
